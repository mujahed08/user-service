# generated by datamodel-codegen:
#   filename:  http://localhost:7001/openapi.json
#   timestamp: 2021-09-09T08:02:29+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra, Field, constr


class Response(BaseModel):
    code: int = Field(..., title='Code')
    message: str = Field(..., title='Message')
    data: Dict[str, Any] = Field(..., title='Data')


class UserIn(BaseModel):
    class Config:
        extra = Extra.forbid

    name: constr(max_length=64) = Field(..., title='Name')
    username: constr(max_length=64) = Field(..., title='Username')
    password: constr(max_length=256) = Field(..., title='Password')
    enabled: Optional[bool] = Field(True, title='Enabled')


class ValidationError(BaseModel):
    loc: List[str] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')
